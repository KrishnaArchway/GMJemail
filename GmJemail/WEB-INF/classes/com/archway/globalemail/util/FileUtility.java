package com.archway.globalemail.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * 
 * Archway Marketing Services.
 * 7525 Cogswell Rd,
 * Romulus, MI - 48174.
 * Phone - 734.713.2000
 * 
 * Project Name            : gmJemail
 * 
 * Author                  : bhattam0 - Amar Bhatt Email:(AMAR_BHATT@ARCHWAY.COM) Ext:(2019)
 * File Name               : FileUtility.java 
 * Package Name            : com.archway.globalemail.util
 * 
 * Date                    : Oct 27, 2005 - 3:07:43 PM
 * 
 * Change Date             : May 18, 2006 4:14:05 PM
 * 							 May 25, 2006 2:59:47 PM
 *                           May 30, 2006 12:36:03 PM
 * 
 * ---------------------------------------------------------
 * Description :- Add Class Description here
 * ---------------------------------------------------------
 */

public class FileUtility
{

	/**
	 * Creates a file.
	 * 
	 * @param Path
	 * @param FileName
	 * @return
	 * @throws Exception
	 */
	public static boolean CreateFile ( String Path , String FileName )
																		throws Exception
	{
		// Create a File object
		File file = new File ( Path + FileName );
		boolean success = false;
		try
		{
			// Create file on disk (if it doesn't exist)
			success = file.createNewFile ();
		}
		catch ( IOException e )
		{
			e.printStackTrace ();
		}
		if ( ! success )
		{
			throw new Exception ( "Unable to Create File, File Already Exists" );
		}
		return success;
	}

	/**
	 * @param prefix
	 * @param sufix
	 * @param contentsToFile
	 * @return An Absolute pathname denoting a newly-created empty file
	 * @throws Exception
	 */
	public static String CreateTempFile (
											String prefix ,
											String sufix ,
											String contentsToFile )
																	throws Exception
	{
		//    Create a temporary file object
		File tempFile = File.createTempFile ( prefix , sufix );

		// Write to temporary file
		BufferedWriter out = new BufferedWriter ( new FileWriter ( tempFile ) );
		out.write ( contentsToFile );
		out.close ();

		return tempFile.getAbsolutePath ();
	}

	/**
	 * -----------------------------------------------------------------------------
	 * This program demonstrates how to create a temporary file that will be
	 * deleted when the program exits. The Java I/O package contains a method for
	 * creating temporary files. The method creates a new empty file in the
	 * specified directory, using the given prefix and suffix strings to generate
	 * its name. If this method returns successfully then it is guaranteed that:
	 * 1.) The file denoted by the returned abstract pathname did not exist
	 * before this method was invoked, and 2.) Neither this method nor any of its
	 * variants will return the same abstract pathname again in the current
	 * invocation of the virtual machine. This method provides only part of a
	 * temporary-file facility. To arrange for a file created by this method to
	 * be deleted automatically, use the deleteOnExit() method. The prefix
	 * argument must be at least three characters long. It is recommended that
	 * the prefix be a short, meaningful string such as "hjb" or "mail". The
	 * suffix argument may be null, in which case the suffix ".tmp" will be used.
	 * To create the new file, the prefix and the suffix may first be adjusted to
	 * fit the limitations of the underlying platform. If the prefix is too long
	 * then it will be truncated, but its first three characters will always be
	 * preserved. If the suffix is too long then it too will be truncated, but if
	 * it begins with a period character ('.') then the period and the first
	 * three characters following it will always be preserved. Once these
	 * adjustments have been made the name of the new file will be generated by
	 * concatenating the prefix, five or more internally-generated characters,
	 * and the suffix. If the directory argument is null then the
	 * system-dependent default temporary-file directory will be used. The
	 * default temporary-file directory is specified by the system property
	 * java.io.tmpdir. On UNIX systems the default value of this property is
	 * typically "/tmp" or "/var/tmp"; on Win32 systems it is typically
	 * "c:\\temp". A different value may be given to this system property when
	 * the Java virtual machine is invoked, but programmatic changes to this
	 * property are not guaranteed to have any effect upon the the temporary
	 * directory used by this method. Parameters: prefix - The prefix string to
	 * be used in generating the file's name; must be at least three characters
	 * long suffix - The suffix string to be used in generating the file's name;
	 * may be null, in which case the suffix ".tmp" will be used directory - The
	 * directory in which the file is to be created, or null if the default
	 * temporary-file directory is to be used Returns: An abstract pathname
	 * denoting a newly-created empty file
	 * -----------------------------------------------------------------------------
	 */

	public static void CreateTempFileDelete (
												String prefix ,
												String sufix ,
												String contentsToFile )
																		throws Exception
	{
		//    Create a temporary file object
		File tempFile = File.createTempFile ( prefix , sufix );

		// Delete temp file when program exits
		tempFile.deleteOnExit ();

		// Write to temporary file
		BufferedWriter out = new BufferedWriter ( new FileWriter ( tempFile ) );
		out.write ( contentsToFile );
		out.close ();
	}

	/**
	 * Deletes a file.
	 * 
	 * @param Path
	 * @param FileName
	 * @return
	 * @throws Exception
	 */
	public static boolean DeleteFile ( String Path , String FileName )
																		throws Exception
	{

		// Create a File object
		File file = new File ( Path + FileName );
		boolean success = file.delete ();
		if ( ! success )
		{
			throw new Exception ( "Unable to Delete File" );
		}
		return success;
	}

	/**
	 * Reads a file.
	 * 
	 * @param Path
	 * @param FileName
	 * @return
	 * @throws Exception
	 */

	public static String ReadFile ( String Path , String FileName )
																	throws Exception
	{
		String returnString = "";
		String str = "";
		BufferedReader in = new BufferedReader ( new FileReader ( Path + FileName ) );
		while ( ( str = in.readLine () ) != null )
		{
			returnString += str;
		}
		return returnString;
	}

}